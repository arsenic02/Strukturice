//1. zad radi

int SwapPairs(int data1,int data2)
{
	LinkedNode* ptr1=findNode(data1);
	LinkedNode* ptr2=findNode(data2);
	LinkedNode* ptr1Prev=findPrevNode(start,ptr1);//prvi parametar od kog pocinje trazenje, drugi parametar da se trazi prethodnik od ptr1
	if(!ptr1))
		return 0;
	bool swap=true;//menja od data1 do data2
	if(!ptr2)
		swap=false;//menja od data1 do kraja liste
	int toRet=0;
	if(swap)
	{
		//ptr1Next=ptr1->next;
		while(ptr1!=ptr2)
		{
			//ptr1Prev=findPrevNode(start,ptr1);
			zameniParove(ptr1Prev,ptr1,ptr1->next);
			toRet++;
			ptr1Prev=ptr1->next;
			ptr1=ptr1->next->next;//posto  su zamenjena 2 suseda mora da se dodje do 3 cvora
		}
	}
	else
	{
		while(ptr1!=nullptr)
		{
			//ptr1Prev=findPrevNode(start,ptr1);
			zameniParove(ptr1Prev,ptr1,ptr1->next);
			toRet++;
			ptr1Prev=ptr1->next;
			ptr1=ptr1->next->next;
		}
	}
	return toRet;
}

bool zameniParove(LinkedNode* ptr1Prev,LinkedNode* ptr1,LinkedNode* ptr1Next)
{
	ptr1->next=ptr1Next->next;
	ptr1Next->next=ptr1;
	ptr1Prev->next=ptr1Next;
	
}
bool LinkedNode* findPrevNode(LinkedNode* ptr,LinkedNode* ptr1)
{
	while(ptr->next!=ptr1 && ptr->next!=nullptr)
	{
		ptr=ptr->next;
	}
	return ptr;
}
//ovaj ne radi valjda
int LList::SwapPairs(int data1, int data2)
{
	//mozda treba metoda koja ispituje parnost liste
	if(!isInList(data1))
		return 0;
	LListNode* pData1 = head;
	while (pData1->info != data1)
		pData1 = pData1->next;
	LListNode* pPrevData1 = head;//ulancava neizmenjene elemente koji su prema head sa prvim elementom podliste
	LListNode* pData2 = pData1;
	while (pData2->info != data2)
		pData2 = pData2->next;
	LListNode* pNextData2 = pData2->next;//cuva pokazivac na cvor nakon modifikovane podliste kako bi se promene ulancale u celoj listi
	while (pPrevData1->next != pData1)//potencijalni problem
		pPrevData1 = pPrevData1->next;
	LListNode* pPrev = pData1;//pPrev i pNext pointeri koji menjaju mesta u podlisti
	LListNode* tmp = pData1;//za kretanje kroz podlistu
	LListNode* pNext = pPrev->next;
	LListNode* pom;//za zamenu pomocni pointer
	int brojac=0;
	if (isInList(data2))
	{
		int flag = 0;
		while (tmp->info != data2 && pPrev->info!=data2)
		{
			tmp = tmp->next->next;
			pom = pPrev;
			pPrev = pNext;
			pNext = pom;
			if (flag == 0)
			{
				pPrevData1->next = pPrev;
				flag++;
			}
				
			
			pPrev = pPrev->next;//pPrev se inkrementira
			pNext = pPrev->next;//! pNext je odmah nakon pPrev
			brojac++;
		}
//		pPrevData1->next = pData1;
		//pData2->next = pNextData2;
		cout << brojac << endl;
		return brojac;
	}
	else
	{
		while (tmp != nullptr)
		{
			pom = pPrev;
			pPrev = pNext;
			pNext = pom;
			tmp = tmp->next->next;
			brojac++;
		}
	}
}
