//1.
void LList::GroupElements()
{
	LListNode* ptr1 = head;
	LListNode* ptr2 = ptr1->next;
	LListNode* savePtr2;
	LListNode* savePtr1Next;
	LListNode* prevPtr2;
	while (ptr1 != nullptr )
	{
		while (ptr2 != nullptr && ptr1->info != (ptr2->info))//nema potrebe za prelancavanjem ako su u listi vec isti elementi jedni pored drugih
		{
			ptr2 = ptr2->next;
		}
		prevPtr2 = ptr1;
		while (prevPtr2->next != ptr2)
		{
			prevPtr2 = prevPtr2->next;
		}
		if (ptr2!=nullptr && ptr1->info == ptr2->info)//proverava se razlog izlaska iz petlje
		{
			savePtr2 = ptr2;
			prevPtr2->next = savePtr2->next;
			savePtr1Next = ptr1->next;//cuva se ptr1 next
			ptr1->next = ptr2;//ptr1 pokazuje na svoj duplikat
			ptr1->next->next = savePtr1Next;//duplikat pokazuje na sledeci cvor koji je bio sledbenik ptr1
			
		}
		ptr1 = ptr1->next;
		if(ptr1!=nullptr)
			ptr2 = ptr1->next;
	}
}
//2.
unsigned int HashTable::h(char* key)
{
	return g(f(key));
}

unsigned int HashTable::f(char* key)
{
	//TODO:Implementirati funkciju koja prevodi char u unsigned int
	unsigned int res = 0;
	for (int i = 11; i > 6; i--)
		res = res << 7 ^ key[i];
	return res;
}

unsigned int HashTable::g(unsigned int key)
{
	//TODO:Implementirati funkciju koja prevodi unsigned int u [0...M-1]
	const unsigned int a = 2654435769;
	unsigned long long ak = a * key;
	return ak>>(32-(int)log2(getLength()));
}
void withdraw(const char* key) {
	uint index = h(key);
	if (table[index].status != 2)
		return;
	uint prev = -1;//oznacava da se prvi element brise
	while (index != -1 and index != 0 and strcmp(table[index].getKey(), key) != 0) {
		prev = index;
		index = table[index].next;
	}
	if (prev == -1 and table[index].next == -1) {//brisanje prvog i jedinog elementa u listi
		table[index].status = 1;
	}
	else if (prev == -1 and table[index].next != -1) {//brisanje prvog elementa u listi sa vise elemenata
		prev = index;
		index = table[index].next;
		table[prev] = table[index];
		table[index].next = lrmp;
		table[index].status = 1;
		lrmp = index;
	}
	else {//brisanje srednjeg ili poslednjeg elementa u listi
		table[prev].next = table[index].next;
		table[index].status = 1;
		table[index].next = lrmp;
		lrmp = index;
	}
	count -= 1;
}
//3. radi moj nacin
bool isPerfect()
{
	if(root==nullptr)
		return 0;
	return isPerfect(root);
}
bool isPerfect(Node* root)
{
	if(root==nullptr)
		return false;
	int leftSubtree=isPerfect(root->left,0);
	int rightSubtree=isPerfect(root->right,0);
	int diff=abs(leftSubtree-rightSubtree);
	if(diff!=-1)
		return false;
	isPerfect(root->left);
	isPerfect(root->right);
	return true;
}
int isPerfect(Node* root,int& count)
{
	if(root==nullptr)
		return 0;
	count++;
	isPerfect(root->left,&count);
	isPerfect(root->right,&count);
	return count;
}
//4.
int GraphAsListsInt::getMaxConnectionsDisjointSubgraph()
{
	LinkedNodeInt* temp = start;
	setStatusForAllNodes(1);
	LinkedNodeInt* nextNode = temp;
	int maxCount = 0, curCount;
	QueueAsArrayLinkedNodeInt qju(nodeNum);
	while (temp != 0)
	{
		qju.enqueue(temp);
		temp->status = 1;
		curCount = 0; // Resetovanje brojaca trenutnog broja potega
		while (!qju.isEmpty())
		{
			temp = qju.dequeue();
			temp->status = 2;
			LinkedEdgeInt* edge = temp->adj;
			while (edge != nullptr)
			{
				if (edge->dest->status == 0)
				{
					qju.enqueue(edge->dest);
					edge->dest->status = 1;
				}
				if (edge->dest->status != 2)//kad je status=2, cvor je vec obradjen, da sse spreci dupliranje
					curCount++;
				edge = edge->link;
			}
		}
		if (curCount > maxCount)
			maxCount = curCount;
		while (nextNode != 0 && nextNode->status != 0)
			nextNode = nextNode->next;
		temp = nextNode;
	}
	return maxCount;
}
