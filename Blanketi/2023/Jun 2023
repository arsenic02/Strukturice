//1. imam i ja svoje ali je malo neefikasno
bool deleteSublist(LinkedNode* sublist) {
    if (sublist == nullptr) {
        return false;
    }

    LinkedNode* trenutni = start;  // Pretpostavka da je `start` glava glavne povezane liste

    while (trenutni != nullptr) {
        if (jePodudaranje(trenutni, sublist)) {
            obrisiPodudarajucuPodlistu(trenutni, sublist);
            return true; // Pretpostavka je da želite da obrišete samo jedno pojavljivanje podliste
        }
        trenutni = trenutni->next;
    }

    return false; // Podlista nije pronađena
}

bool jePodudaranje(LinkedNode* lista1, LinkedNode* lista2) {
    while (lista1 != nullptr && lista2 != nullptr) {
        if (lista1->data != lista2->data) {
            return false;
        }
        lista1 = lista1->next;
        lista2 = lista2->next;
    }
    return lista2 == nullptr; // Ako je lista2 dostigla kraj, to znači da su svi elementi bili podudarajući
}

void obrisiPodudarajucuPodlistu(LinkedNode* &start, LinkedNode* podlista) {
    LinkedNode* prethodni = nullptr;
    LinkedNode* trenutni = start;
    LinkedNode* podlistaTrenutni = podlista;

    while (podlistaTrenutni != nullptr) {
        if (trenutni == nullptr || trenutni->data != podlistaTrenutni->data) {
            return; // Nešto nije u redu, podlista nije pronađena
        }
        podlistaTrenutni = podlistaTrenutni->next;
        prethodni = trenutni;
        trenutni = trenutni->next;
    }

    // Ako smo stigli ovde, podlista je pronađena, obrišite je
    if (prethodni == nullptr) {
        start = trenutni; // Ažurirajte početak glavne liste
    } else {
        prethodni->next = trenutni;
    }

    while (podlista != nullptr) {
        LinkedNode* privremeni = podlista;
        podlista = podlista->next;
        delete privremeni;
    }
}

//3. AI, imam i svoje slicno ali ne radi najbolje
BSTNodeInt* BSTreeInt::maxHeightDiff()
{
    int maxDiff = 0;
    return maxHeightDiff(root, &maxDiff);
}

BSTNodeInt* BSTreeInt::maxHeightDiff(BSTNodeInt* root, int* max)
{
    if (root == nullptr)
        return nullptr;

    int heightLeft = Height(root->left);
    int heightRight = Height(root->right);
    int currentDiff = abs(heightLeft - heightRight);

    if (currentDiff > *max)
    {
        *max = currentDiff;
        return root;
    }

    BSTNodeInt* leftMax = maxHeightDiff(root->left, max);
    BSTNodeInt* rightMax = maxHeightDiff(root->right, max);

    return (*max > currentDiff) ? ((leftMax != nullptr) ? leftMax : rightMax) : root;
}

int BSTreeInt::Height(BSTNodeInt* root)
{
    if (root == nullptr)
        return 0;

    return 1 + max(Height(root->left), Height(root->right));
}
//4. nisam siguran AI
// Maksimalan broj čvorova
const int MAX_V = 1000;

// Klasa za predstavljanje čvora liste susedstva
class Node {
public:
    int data;       // Podatak čvora (vrednost čvora)
    Node* next;     // Pokazivač na sledeći čvor u listi

    Node(int d) : data(d), next(nullptr) {}
};

// Klasa za implementaciju grafa koristeći listu susedstva
class Graph {
private:
    int V;                   // Broj čvorova
    Node* adjacencyList[MAX_V];  // Lista susedstva za svaki čvor
    int degree[MAX_V];        // Niz za čuvanje stepena svakog čvora

public:
    // Konstruktor klase Graph
    Graph(int vertices) : V(vertices) {
        // Inicijalizacija liste susedstva i stepena čvorova
        for (int i = 0; i < V; ++i) {
            adjacencyList[i] = nullptr;
            degree[i] = 0;
        }
    }

    // Metoda za dodavanje grane između čvorova u listu susedstva
    void addEdge(int u, int v) {
        // Dodavanje čvora v u listu susedstva čvora u
        Node* newNode = new Node(v);
        newNode->next = adjacencyList[u];
        adjacencyList[u] = newNode;

        // Dodavanje čvora u u listu susedstva čvora v
        newNode = new Node(u);
        newNode->next = adjacencyList[v];
        adjacencyList[v] = newNode;

        // Ažuriranje stepena čvorova
        degree[u]++;
        degree[v]++;
    }

    // Metoda koja povezuje čvorove sa najmanjim i najvećim stepenom dodavanjem potega
    void connectMaxAndMin() {
        int minDegreeNode = -1;
        int maxDegreeNode = -1;
        int minDegree = V + 1;
        int maxDegree = -1;

        // Pronalaženje čvora sa najmanjim i najvećim stepenom
        for (int i = 0; i < V; ++i) {
            if (degree[i] < minDegree) {
                minDegree = degree[i];
                minDegreeNode = i;
            }
            if (degree[i] > maxDegree) {
                maxDegree = degree[i];
                maxDegreeNode = i;
            }
        }

        // Dodavanje potega između disjunktnih podgrafova
        Node* newNode = new Node(maxDegreeNode);
        newNode->next = adjacencyList[minDegreeNode];
        adjacencyList[minDegreeNode] = newNode;

        newNode = new Node(minDegreeNode);
        newNode->next = adjacencyList[maxDegreeNode];
        adjacencyList[maxDegreeNode] = newNode;

        // Ažuriranje stepena čvorova
        degree[minDegreeNode]++;
        degree[maxDegreeNode]++;
    }
};

int main() {
    // Kreiranje grafa sa 7 čvorova
    Graph g(7);

    // Dodavanje grana između čvorova
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(3, 4);
    g.addEdge(4, 5);
    g.addEdge(4, 6);

    // Dodavanje potega između disjunktnih podgrafova sa najvećim i najmanjim brojem čvorova
    g.connectMaxAndMin();

    return 0;
}

