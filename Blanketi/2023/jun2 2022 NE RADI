//1. 
LList* SplitOrMove()
 {
	LinkedNode* prevPtr=nullptr;
	LinkedNode* ptr=head;
	if(!ptr) return nullptr;
	LList* newList=LList();
	while(ptr!=nullptr)
	{
		if(duplikat(ptr)%2==0)//za 0 i 2 vrsi se prelancavanje
		{
			newList->insert(ptr->info);
			if(prevPtr)
				prevPtr->next=ptr->next;
			else
				head=ptr->next;
			LinkedNode* tmp=ptr;
			delete tmp;
			tmp=nullptr;	
		}
		prevPtr=ptr;
		ptr=ptr->next;
	}
 }
 
 int duplikat(LinkedNode* ptr)
 {
	 LinkedNode* pok=findNode(ptr->info);//nadje se prvi duplikat ako postoji
	 if(!pok)
		 return 0;
	 else
	 {
		 if(pok==ptr)
			 return 1;//nadjen je prvi duplikat
		 return 2;//nadjen je drugi duplikat
	 }
 }
 
