///1. zadatak
int LList::Duplikat(int el)
{
	int brojac = 0;
	LListNode* ptr = head;
	while (ptr!=nullptr && brojac<=2)
	{
		if (ptr->info == el)
			brojac++;
		ptr = ptr->next;
	}
	if (brojac > 2)
		throw new exception("Element u listi se pojavljuje vise od 2 puta!");
	else
		return brojac;
}
LList* LList::SplitOrMove()//fali brisanje iz stare liste
{
	LListNode* tmp = head;
	LList* newList = new LList();
	LListNode* ptrDuplikat;
	
	while (tmp != nullptr)
	{
		int brPonEl = Duplikat(tmp->info);//broj ponavaljanja elemenata, da li ima duplikata ili su jedinstveni elementi
		if ( brPonEl== 1)
		{
			newList->addToHead(tmp->info);
		}
		else
		{
			ptrDuplikat = tmp->next;//trik da krene od narednog elementa kako bi nasao pointer za duplikat
			while (ptrDuplikat->info != tmp->info)//ovde greska
			{
				ptrDuplikat = ptrDuplikat->next;
			}
			newList->addToHead(ptrDuplikat->info);
		}
		tmp = tmp->next;
	}
	return newList;
}
