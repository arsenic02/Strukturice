//2. deo zadatka 
#include <iostream>

// Struktura za čvor liste
struct Node {
    std::string data;
    Node* next;

    Node(const std::string& value) : data(value), next(nullptr) {}
};

// Funkcija za dodavanje čvora na početak liste
void pushToFront(Node*& head, const std::string& value) {
    Node* newNode = new Node(value);
    newNode->next = head;
    head = newNode;
}

// Funkcija za ispis liste
void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

// Funkcija za premestanje elementa na početak liste
void moveToFront(Node*& head, const std::string& target) {
    if (head == nullptr) {
        return; // Lista je prazna
    }

    if (head->data == target) {
        return; // Ciljni element je već na početku
    }

    Node* prev = nullptr;
    Node* current = head;

    while (current != nullptr && current->data != target) {
        prev = current;
        current = current->next;
    }

    if (current == nullptr) {
        return; // Element nije pronađen
    }

    prev->next = current->next;
    pushToFront(head, current->data);
    delete current;
}

int main() {
    Node* head = nullptr;

    // Dodavanje elemenata u listu
    pushToFront(head, "sinonim3");
    pushToFront(head, "sinonim2");
    pushToFront(head, "sinonim1");
    pushToFront(head, "nepozeljan");
    pushToFront(head, "sinonim4");

    std::cout << "Originalna lista: ";
    printList(head);

    // Premestanje "nepozeljan" na početak
    moveToFront(head, "nepozeljan");

    std::cout << "Lista nakon premestanja: ";
    printList(head);

    // Oslobađanje resursa
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
//3. AI  kazze da ima mozda greske oko prenosa parametara medju metodama
Node* NadjiObrok(Node* root,Node* toRet,int& max)
{
	if(!root)
		return nullptr;
	int left=countNodes(root->left);
	int right=countNodes(root->right);
	int diff=abs(left-right);
	if(diff>max)
	{
		max=diff;
		toRet=root;
	}
	NadjiObrok(root->left,toRet,&max);
	NadjiObrok(root->right,toRet,&max);
	return toRet;
}
Node* NadjiObrok(Node* root)
{
	if(!root)
		return nullptr;
	int max=0;
	Node* toRet=nullptr;
	return NadjiObrok(root,toRet,&max);
}
int countNodes(Node* root)
{
	if(!root)
		return 0;
	return 1+countNodes(root->left)+countNodes(root->right);
}
//4. Luleks ima sitne greske, ovo je moj ispravljen kod
void GraphAsListsInt:: countIns()// dec 2021 Brojanje ulaznih grana
{
	LinkedNodeInt* temp = start;
	while (temp != 0)//setStatusForAllNodes(1)
	{
		temp->status = 1;
		temp = temp->next;
	}
	temp = start;
	while (temp != nullptr)
	{
		LinkedEdgeInt* edge = temp->adj;
		while (edge != nullptr)
		{
			edge->dest->distance++;// Povecanje broja ulaznih grana za odredisni cvor
			//Ovo se može koristiti kako bi se pratio broj ključeva potrebnih za otvaranje određene sobe.
			edge = edge->link;
		}
		temp = temp->next;
	}
}
void GraphAsListsInt::obidjiSveMoguce(int start)
{
	countIns();
	LinkedNodeInt* temp = this->start;
	while (temp != nullptr && temp->node != start)
		temp = temp->next;
	if (temp == 0)
		return;
	StackAsArrayLinkedNodeInt stek(nodeNum);
	stek.push(temp);
	temp->status = 2;
	while (!stek.isEmpty())
	{
		//temp = stek.getTop();
		temp = stek.pop();
		temp->status = 3;
		temp->visit();
		LinkedEdgeInt* edge = temp->adj;
		while (edge != nullptr)
		{
			edge->dest->distance--;// Smanjenje broja ulaznih grana za odredisni cvor, smanjuje se potreban broj kljuceva da se otkljuca soba
			if (edge->dest->distance == 0 && edge->dest->status == 1)// Ako su ulazne grane nule i cvor nije posecen, imamo sve kljueve za otkljuavanje sobe
				stek.push(edge->dest);// Stavljanje odredisnog cvora na stek
			edge = edge->link;
		}
	}
}
