//1.
/*
1. napisati fju koja u jednostruko spregnutu lancanu listu, bez pokazivaca na rep liste, uredjenu u rastuci redosled
dodaje element sa info delom br na odgovarajuce mesto u listi tako da lista odrzava uredjenje. Ukoliko element sa info delom
jednakim vrednosti br vec postoji u listi, taj element se onda uklanja iz liste i nista se ne dodaje u listu.
jel doba rkod za ovaj zadatak, pisi na srpskom
*/
void injectOrRemove(int br)
{
	LinkedNode* ptr=findNode(br);
	if(ptr!=nullptr)
	{
		LinkedNode* prev=nullptr;
		while(prev->next!=ptr && prev!=nullptr)
		{
			prev=ptr;
			ptr=ptr->next;
		}
		if(prev)
		{
			prev->next=ptr->next;
		}
		else
			head=ptr->next;
		delete ptr;
		ptr=nullptr;
	}
	else
	{
		prev=nullptr;
		LinkedNode* pok=head;
		ptr=new LinkedNode(br);
		while(pok!=nullptr && br<pok->info)
		{
			prev=pok;
			pok=pok->next;
		}
		prev->next=ptr;
		ptr->next=pok->next;
	}
}
//3.  radi moj nacin
Node* findNodeWithLargestRightSubtree()
{
	if(root==nullptr)
		return nullptr;
	return function(root,max,nullptr);
}

Node* function(Node* root,int&max,Node* toRet)
{
	if(root==nullptr)
		return nullptr;
	int curr=countNodes(root->right);
	if(curr>max)
	{
		toRet=root;
		max=curr;
	}
	function(root->left,&max);
	function(root->right,&max);
	return toRet;
}

int countNodes(Node* root) {
	if(root==nullptr)
		return nullptr;
	return 1 + countNodes(root->left) + countNodes(root->right);
}
//4.
int reachableInNHoops(GraphNode* a, int n) {
//bolje red/stek za ovakve zadatke, dijkstra samo kad se trazi najkraci put!!!
    // Postavljanje privremenog pokazivača za prolazak kroz čvorove grafa
    GraphNode* temp = start;

    // Postavljanje statusa i udaljenosti svakog čvora na početne vrednosti
    while (temp != 0) {
        temp->status = 1;    
        temp->distance = 0;   // Postavljanje udaljenosti čvora na 0
        temp = temp->next;   
    }

    int count = 0;           // Inicijalizacija brojača čvorova dostižnih tačno za n koraka
    temp = a;                

    queue<GraphNode*> qju;   
    qju.push(temp);          
    temp->status = 2;        


    while (not qju.empty()) {
        temp = qju.front();   
        qju.pop();            
        temp->status = 3;     

       
        GraphEdge* edge = temp->adj;
        while (edge != 0) {
            if (edge->dest->status == 1) {
                edge->dest->status = 2;  
                qju.push(edge->dest);    // Stavljanje odredišnog čvora u red za obradu
            }

            // Provera udaljenosti i obavljanje potrebne obrade
            if (edge->dest->distance != n) {
                bool modifiable = edge->dest->distance != 0;  // Provera da li je udaljenost prethodno bila razlicita od 0 pre
/*nego sto se postavila nova udaljenost,Ako je udaljenost bila različita od 0, to znači da je već bila postavljena u prethodnom
prolazu kroz graf. U tom slučaju, nakon što se postavi nova udaljenost, korak se nazad smanjuje (oduzima 1) kako bi se tačna 
udaljenost čuvala samo za prvi put kad je čvor dostignut tačno nakon n koraka. Ovo osigurava da se ne gubi tačna udaljenost 
čvora u slučaju da je već obrađen u prethodnim koracima.*/
                
                edge->dest->distance = temp->distance + 1;    // Postavljanje udaljenosti odredišnog čvora

                if (edge->dest->distance == n && edge->dest->status != 4) {
                    count += 1;                  // Povećanje broja čvorova dostižnih tačno za n koraka
                    cout << edge->dest->key << endl;  // Ispis ključa čvora
                    edge->dest->status = 4;      // Postavljanje statusa čvora na 4 (obradjen)
                    if (modifiable)
                        edge->dest->distance -= 1;  
                } else if (edge->dest->distance == n && edge->dest->status == 4) {
                    edge->dest->distance -= 1;  // Smanjenje udaljenosti ako je čvor već obradjen
                }
            }

            edge = edge->next;  
        }
    }

    return count;  
}
