//3. moj nacin radi
/*
napisi funkciju koja vraca broj cvorova za koje vazi da je zbir elemenata njihovog levog podstabla veci od zbira
elemenata desnog podstabla
kazi jel dobar kod
*/
int countSL()
{
	if(!root)
		return 0;
	int count=0;
	return countSL(root,&count);
}
int countSL(Node* root,int &count)
{
	if(!root)
		return 0;
	int sumL=zbir(root->left,0);
	int sumR=zbir(root->right,0);
	if(sumL>sumR)
		count++;
	countSL(root->left,&count);
	countSL(root->right,&count);
	return count;
}
int zbir(Node* root,int& suma)
{
	if(root==nullptr)
		return 0;
	suma+=root->key;
	zbir(root->left,&suma);
	zbir(root->right,&suma);
	return suma;
}

//4. 
/*
putnik putuje od aerodroma a.Treba da dodje na aerodrom b ili aerodrom c u zavisnosti od toga da ima manji broj presedanja
i nikada ne putuje letom koji traje duze od zadatog broja minuta
moj kod radi
*/
int LetACIliBC(Node* a,Node* b,Node* c,int minutes)
{
	if(!a || !b || !c)
		return -1;
	int presedanjeAB=dijkstra(a,b,minutes);
	int presedanjeAC=dijsktra(a,c,minutes);
	if(presedanjeAB==-1 && presedanjeAC==-1)
		return -1;
	else if(presedanjeAB<presedanjeAC && presedanjeAB>-1)
		return presedanjeAB;
	else if(presedanjeAC<presedanjeAB && presedanjeAC>-1)
		return presedanjeAC;
	return -1;
}
int dijkstra(Node* a,Node* b)
{
	if(!a || !b)
		return -1;
	Node* temp=start;
	while(temp!=nullptr)
	{
		temp->status=1;
		temp->distance=numeric_limits<double>::max();
		temp->prev=nullptr;
		temp=temp->next;
	}
	Node* ptr=a;
	PriorityQueue pQueue(nodeNum);
	pQueue.insert(ptr);
	ptr->status=3;
	Edge* pEdge=ptr->adj;
	while(pEdge!=nullptr && pEdge->dest!=b)
	{
		if(pEdge->dest->status==1)
		{
			pEdge->dest->status=2;
			pQueue.insert(pEdge->dest);
		}
		else if(pEdge->dest->status==2)
		{
			if(tmp->distance+pEdge->weight < pEdge->dest->distance)
			{
				int newDistance=tmp->distance+pEdge->weight;
				if (newDistance <= minutes)
				{
					pQueue.update(pEdge->dest,newDistance);
					pEdge->dest->distance=newDistance;
					pEdge->dest->prev=ptr;
				}		
			}
		}
		pEdge=pEdge->link;
	}
	int count=1;
	ptr=b;
	while(ptr!=nullptr && ptr!=a)
	{
		count++;
		ptr=ptr->prev;
	}
	if(ptr==a)
		return count;
	return -1;
}
