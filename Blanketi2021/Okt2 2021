//3. 
BSTNodeInt* BSTreeInt::getNNode()//okt2 2021
{
	return getNNode(root);
}
BSTNodeInt* BSTreeInt::getNNode(BSTNodeInt* root)
{
	if (root != nullptr)
	{
		int counterLeft = obilaziCvorove(root->left, 0);
		int counterRight = obilaziCvorove(root->right, 0);
		if (counterRight == counterLeft + 2)
			return root;
		//getNNode(root->left);//ja sam ovako ali ne radi  dobro
		//getNNode(root->right); --||--
		BSTNodeInt* leftResult = getNNode(root->left);//16- 20 linija AI uradila nisam siguran
		if (leftResult != nullptr)
			return leftResult;
		return getNNode(root->right);
	}
	return nullptr;
}
int BSTreeInt::obilaziCvorove(BSTNodeInt* ptr,int* counter)
{
	int countL, countR;
	if (ptr == nullptr)
		return 0;
	countL=obilaziCvorove(ptr->left,counter);
	countR=obilaziCvorove(ptr->right,counter);
	return 1+countL+countR;
}
//4. malo ispravljen i dopunjen Luleksov kod
/*
Za pronalaženje puta sa najmanje presedanja između dva aerodroma, pristup pomoću BFS (pretrage u širinu) je prikladniji nego 
Dijkstra algoritam. Dijkstra algoritam se obično koristi za pronalaženje najkraćeg puta u težinskom grafu, gde svaka grana ima
numeričku težinu. U vašem slučaju, cilj je da se minimizuje broj presedanja, a ne težina puta.

BFS je odgovarajuća opcija jer omogućava da se istraži susedstvo svakog čvora na istoj dubini pre nego što se pređe na sledeći
nivo dubine. Ovo je korisno jer vam omogućava da sistematično istražujete sve opcije sa istim brojem presedanja pre nego što 
pređete na sledeći broj presedanja.

nije dobar ni dfs za ovakav zadatak
*/
int numberOfConnections(int startAero, int endAero) {
    GraphNode* temp = start;
    GraphNode* pStart = nullptr, * pEnd = nullptr;

    while (temp != nullptr) {
        temp->status = 1;
        temp->prev = nullptr;
        temp->distance = 0;

        if (temp->key == startAero)
            pStart = temp;
        if (temp->key == endAero)
            pEnd = temp;

        temp = temp->next;
    }

    if (pStart == nullptr or pEnd == nullptr)
        return -1; // Aerodromi nisu pronađeni

    queue<GraphNode*> qju;
    qju.push(pStart);
    pStart->status = 2;

    while (!qju.empty()) {
        temp = qju.front();
        qju.pop();
        temp->status = 3;

        GraphEdge* edge = temp->adj;
        while (edge != nullptr) {
            if (edge->dest->status == 1) {
                edge->dest->status = 2;
                edge->dest->prev = temp;

                if (edge->dest == pEnd) {
                    // Pronađen je ciljni aerodrom, prekidamo BFS
                    break;
                }

                qju.push(edge->dest);
            }
            edge = edge->next;
        }
    }

    // Brojanje presedanja
    int numberOfStops = 0;
    temp = pEnd;
    while (temp->prev != nullptr) {
        numberOfStops++;
        temp = temp->prev;
    }

    return numberOfStops;
}

