void LList::MoveMinToHead(LListNode* start)//radi
{
	LListNode* i = start;
	LListNode* j = i->next;
	LListNode* minNode = i;
	while (j != nullptr)
	{
		if (j->info < minNode->info)
		{
			minNode = j;
		}
		j = j->next;
	}
	if (minNode != start)
	{
		LListNode* tmp = start;
		while (tmp->next != minNode)
		{
			tmp = tmp->next;
		}
		tmp->next = minNode->next;
		minNode->next = start;
		head = minNode;
	}
}

void LList::SortList()//nesto nece
{
	LListNode* current = head->next;
	while (current != nullptr && current->next != nullptr)//2. uslov da se ne sortira zadnji element
	{
		MoveMinToHead(current);
		current = current->next;
		LList::printAll();
	}
}
//3. ne radi bas treba da se resi da se ptr "inkrementira"
BSTNodeInt* BSTreeInt::findSibling(BSTNodeInt* p)
{
	BSTNodeInt* ptr = root;
	BSTNodeInt* ptrDeq;//ptr u koji se smesta ptr iz reda
	QueueAsArrayBSTNodeInt queue(numOfElements);
	int pFlag = 0;//govori dali je nadjen p pointer
	for (int n = 1; n <= numOfElements; n *= 2)//osobina stabla da svaki sledeci nivo ima 2 puta vise cvorova
	{
		for (int i = 1; i < n; i++)//smestanje u red svakog cvora po nivou
		{
			if (ptr == p) {
				pFlag++;
			}
			queue.enqueue(ptr);
			
			if (pFlag > 0 && !queue.isEmpty() && p!=ptr)
			{
				ptrDeq = queue.dequeue();//mozda i da se isprazni red
				return ptrDeq;
			}
			queue.dequeue();
		}
	}
	return nullptr;
}
//4.

/*
U dinamicki implementiranom orijentisanom grafu napisati funkciju bool pathExists(Node* a,Node* b, Node* c,Node* d) koja odredjuje da li postoji 
put izmedju cvorova a i b koji ukljucuje poteg izmedju poteg izmedju cvorova c i d
moj nacin radi, drugacije je od lukinog
*/
bool pathExists(Node* a,Node* b, Node* c,Node* d)
{
	if(!a || !b || !c || !d)
		return false;//ne postoje prosledjeni cvorovi
	Edge* potegCD=edgeExists(c,d);
	if(!potegCD)
		return false;//poteg je nullptr, znaci ne postoji
	Node* ptr=a;
	Node* ptr2=b;
	Queue queue(nodeNum);
	ptr->status=2;
	queue.enqueue(ptr);
	bool visitedNodeB=false;//flag
	bool visitedEdgeCD=false;//flag
	while(!queue.isEmpty())
	{
		ptr=queue.dequeue();
		ptr-status=3;
		Edge* pEdge=ptr->adj;
		while(pEdge!=nullptr && (!visitedNodeB || !visitedEdgeCD))
		{
			if(pEdge->dest->status==1)
			{
				pEdge->dest->status=2;
				queue.enqueue(pEdge->dest);
			}
			if(pEdge==potegCD)
				visitedEdgeCD=true;
			if(pEdge->dest==ptr2)
				visitedNodeB=true;
			pEdge=pEdge->link;
		}
		ptr=ptr->next;
	}
	if(visitedNodeB && visitedEdgeCD)
		return true;
	return false;
}
Node* edgeExists(Node* a,Node* b)
{
	Edge* edge=a->adj;
	while(edge!=nullptr && edge->dest!=b)
		edge=edge->link;
	return edge;
}
